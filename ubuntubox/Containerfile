FROM ubuntu:23.04

# Remove apt configuration optimized for containers
# Remove docker-gzip-indexes to help with "command-not-found"
RUN rm /etc/apt/apt.conf.d/docker-gzip-indexes /etc/apt/apt.conf.d/docker-no-languages

# Enable myhostname nss plugin for clean hostname resolution without patching
# hosts (at least for sudo), add it right after 'files' entry. We expect that
# this entry is not present yet. Do this early so that package postinst (which
# adds it too late in the order) skips this step
RUN sed -Ei 's/^(hosts:.*)(\<files\>)\s*(.*)/\1\2 myhostname \3/' /etc/nsswitch.conf

# Update the system
RUN apt-get update -y && apt-get upgrade -y

# Install extra packages
RUN DEBIAN_FRONTEND=noninteractive apt-get install -y \
  ubuntu-minimal \
  ubuntu-standard \
  libnss-myhostname \
  ack \
  apt-transport-https \
  ca-certificates \
  curl \
  direnv \
  flatpak-xdg-utils \
  jq \
  git \
  git-lfs \
  gnupg2 \
  gpg \
  httpie \
  keyutils \
  nano \
  nodejs \
  npm \
  protobuf-compiler \
  rsync \
  shellcheck \
  socat \
  telnet \
  tig \
  tree \
  unzip \
  wget \
  whois \
  xsel \
  zip \
  zsh

# Fix empty bind-mount to clear selinuxfs
RUN mkdir /usr/share/empty

# Add flatpak-spawn to /usr/bin
RUN ln -s /usr/libexec/flatpak-xdg-utils/flatpak-spawn /usr/bin/

# Install latest Golang
RUN GO_VERSION=$(curl -s https://go.dev/dl/?mode=json |jq -r '.[0].version') && \
  curl -sL "https://go.dev/dl/${GO_VERSION}.linux-amd64.tar.gz" | tar -xz -C /usr/local
ENV PATH=/usr/local/go/bin:$PATH

# Install Visual Studio Code
RUN wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --batch --yes --dearmor --output /etc/apt/keyrings/packages.microsoft.gpg && \
  echo 'deb [arch=amd64,arm64,armhf signed-by=/etc/apt/keyrings/packages.microsoft.gpg] https://packages.microsoft.com/repos/code stable main' | tee /etc/apt/sources.list.d/vscode.list >/dev/null && \
  apt-get update -y && \
  apt-get install -y code

# Github CLI
RUN curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | tee /usr/share/keyrings/githubcli-archive-keyring.gpg >/dev/null && \
  echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | tee /etc/apt/sources.list.d/github-cli.list > /dev/null && \
  apt-get update -y && \
  apt-get install -y gh

# Google Cloud SDK
RUN echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] http://packages.cloud.google.com/apt cloud-sdk main" | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list && \
  curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key --keyring /usr/share/keyrings/cloud.google.gpg add - && \
  apt-get update -y && \
  apt-get install -y google-cloud-cli

# Install envchain
RUN apt-get install -y libreadline-dev libsecret-1-dev && \
  git clone https://github.com/sorah/envchain.git /tmp/envchain && \
  (cd /tmp/envchain && make && make install) && \
  rm -rf /tmp/envchain && \
  apt-get autoremove -y

# Install Starship
RUN wget -q -c https://github.com/starship/starship/releases/latest/download/starship-x86_64-unknown-linux-musl.tar.gz -O - | tar -xz -C /usr/local/bin

# Since $HOME is mounted to the host system, we'll avoid installing stuff there,
# and instead do this little ugly thing
ENV N_PREFIX=/opt/user/n
ENV TFENV_DIR=/opt/user/tfenv
ENV PATH=$N_PREFIX/bin:$TFENV_DIR/bin:$PATH
RUN mkdir -p /opt/user/n && \
  npm install -g n && \
  n latest && \
  git clone --depth=1 https://github.com/tfutils/tfenv.git "${TFENV_DIR}" && \
  tfenv install latest && \
  npm install -g newman serve yarn @go-task/cli && \
  chown -R 1000:1000 /opt/user

# Symlink the distrobox host process for relevant commands
RUN ln -fs /usr/bin/distrobox-host-exec /usr/local/bin/docker && \
  ln -fs /usr/bin/distrobox-host-exec /usr/local/bin/docker-compose && \
  ln -fs /usr/bin/distrobox-host-exec /usr/local/bin/flatpak && \
  ln -fs /usr/bin/distrobox-host-exec /usr/local/bin/podman && \
  ln -fs /usr/bin/distrobox-host-exec /usr/local/bin/rpm-ostree
