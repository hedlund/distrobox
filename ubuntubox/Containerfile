FROM quay.io/toolbx/ubuntu-toolbox:23.10

# Install extra packages
RUN sudo apt update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y \
  ack \
  apt-transport-https \
  ca-certificates \
  direnv \
  jq \
  git-lfs \
  gpg \
  httpie \
  nano \
  nodejs \
  npm \
  protobuf-compiler \
  rsync \
  shellcheck \
  socat \
  telnet \
  tig \
  wget \
  whois \
  xsel

# Install latest Golang
RUN GO_VERSION=$(curl -s https://go.dev/dl/?mode=json |jq -r '.[0].version') && \
  curl -sL "https://go.dev/dl/${GO_VERSION}.linux-amd64.tar.gz" | tar -xz -C /usr/local
ENV PATH=/usr/local/go/bin:$PATH

# Github CLI
RUN curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | tee /usr/share/keyrings/githubcli-archive-keyring.gpg >/dev/null && \
  echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | tee /etc/apt/sources.list.d/github-cli.list > /dev/null && \
  apt-get update -y && \
  apt-get install -y gh

# Google Cloud SDK
RUN echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] http://packages.cloud.google.com/apt cloud-sdk main" | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list && \
  curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key --keyring /usr/share/keyrings/cloud.google.gpg add - && \
  apt-get update -y && \
  apt-get install -y google-cloud-cli

# Install tflint
RUN curl --fail -sS -L -o /tmp/tflint.zip "https://github.com/terraform-linters/tflint/releases/latest/download/tflint_linux_amd64.zip" && \
  unzip /tmp/tflint.zip -d /usr/local/bin && \
  rm /tmp/tflint.zip

# Install Starship
RUN wget -q -c https://github.com/starship/starship/releases/latest/download/starship-x86_64-unknown-linux-musl.tar.gz -O - | tar -xz -C /usr/local/bin

# Install Taskfile
RUN wget -q -c https://github.com/go-task/task/releases/latest/download/task_linux_amd64.tar.gz -O - | tar -xz -C /usr/local/bin

# Since $HOME is mounted to the host system, we'll avoid installing stuff there,
# and instead do this little ugly thing install n...
ENV N_PREFIX=/opt/user/n
ENV PATH=$N_PREFIX/bin:$PATH
RUN mkdir -p /opt/user/n && \
  npm install -g n && \
  n latest && \
  npm install -g newman serve yarn

# ...and the same for installing tfenv
ENV TFENV_DIR=/opt/user/tfenv
ENV PATH=$TFENV_DIR/bin:$PATH
RUN git clone --depth=1 https://github.com/tfutils/tfenv.git "${TFENV_DIR}" && \
  tfenv install latest && \
  chown -R 1000:1000 /opt/user

# Symlink the distrobox host process for relevant commands
RUN ln -fs /usr/bin/distrobox-host-exec /usr/local/bin/docker && \
  ln -fs /usr/bin/distrobox-host-exec /usr/local/bin/docker-compose && \
  ln -fs /usr/bin/distrobox-host-exec /usr/local/bin/flatpak && \
  ln -fs /usr/libexec/flatpak-xdg-utils/flatpak-spawn /usr/bin/flatpak-spawn && \
  ln -fs /usr/bin/distrobox-host-exec /usr/local/bin/podman && \
  ln -fs /usr/bin/distrobox-host-exec /usr/local/bin/rpm-ostree
